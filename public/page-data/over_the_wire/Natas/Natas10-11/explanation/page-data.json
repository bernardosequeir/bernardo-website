{"componentChunkName":"component---src-templates-blog-post-js","path":"/over_the_wire/Natas/Natas10-11/explanation/","result":{"data":{"markdownRemark":{"html":"<p>So... I'm pretty sure that this is not the intended solution for this level but ... it worked so I don't really care.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?</span>\n<span class=\"token variable\">$key</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">array_key_exists</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"needle\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$key</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token double-quoted-string string\">\"needle\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$key</span> <span class=\"token operator\">!=</span> <span class=\"token double-quoted-string string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/[;|&amp;]/'</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">print</span> <span class=\"token double-quoted-string string\">\"Input contains an illegal character!\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">passthru</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"grep -i <span class=\"token interpolation\"><span class=\"token variable\">$key</span></span> dictionary.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token delimiter important\">?></span></span></code></pre></div>\n<p>This level tries to fix your command injection by catching the use of the characters you regularly use to do it. After seeing that they were only banning three things I was kinda suspicious and thought to check the <a href=\"https://owasp.org/www-community/attacks/Command_Injection\">OWASP page for command injection</a> and I was greatly rewarded. At the bottom it talks about mitigation and how you should not only block \";\" but also \"&#x26;&#x26;\", \"|\" and \"...\". Wait what? \"...\"? Let's try it out with essentially the same command as the last level:</p>\n<p><img src=\"%22../Images/Natas10.png%22\" alt=\"Print Screen of the page\"></p>","frontmatter":{"title":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/over_the_wire/Natas/Natas10-11/explanation/"}}}