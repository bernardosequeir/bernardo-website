{"version":3,"sources":["webpack:///./src/components/layout.js","webpack:///./src/pages/index.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["children","data","className","to","css","site","siteMetadata","title","allMarkdownRemark","edges","filter","node","fields","slug","includes","map","key","id","frontmatter","date","excerpt","query","loader","enqueue","React","createContext","m","module","exports","require","default","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","json"],"mappings":"mWAMe,gBAAmB,IAAhBA,EAAe,EAAfA,SACVC,EAAI,OAWV,OACE,mBAAKC,UAAU,QACb,YAAC,IAAD,CAAMC,GAAG,KACP,kBACED,UAAU,YACVE,IAAG,GAIFH,EAAKI,KAAKC,aAAaC,QAG5B,YAAC,IAAD,CACEL,UAAU,SACVC,GAAG,UACHC,IAAG,GAHL,SASCJ,K,6UCjCQ,0BAAGC,EAAH,EAAGA,KAAH,OACb,YAAC,IAAD,KACE,uBACE,kBACEC,UAAU,WACVE,IAAG,GAFL,cASCH,EAAKO,kBAAkBC,MACrBC,QAAO,qBAAGC,KAAgBC,OAAOC,KAAKC,SAAS,eAC/CC,KAAI,gBAAGJ,EAAH,EAAGA,KAAH,OACH,mBAAKK,IAAKL,EAAKM,GAAIf,UAAU,SAC3B,YAAC,IAAD,CACEC,GAAIQ,EAAKC,OAAOC,KAChBT,IAAG,GAKH,kBACEF,UAAU,YACVE,IAAG,GAIFO,EAAKO,YAAYX,MANpB,IAM2B,6BAASI,EAAKO,YAAYC,OAErD,iBAAGjB,UAAU,SAASS,EAAKS,iBAQlC,IAAMC,EAAK,c,kCC7ClB,sHAcyBC,UAAOC,QAELC,IAAMC,cAAc,K,qBChB/C,IAAsBC,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,UALRH,EAAEI,SAAYJ,G,wFCsBhCK,UAjBU,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,cACpC,OAAKA,EAGET,IAAMU,cAAcC,IAApB,eACLH,WACAC,iBACGA,EAAcG,OALV","file":"component---src-pages-index-js-539daad08e4381fe3921.js","sourcesContent":["/* eslint-disable react/display-name */\r\nimport React from 'react';\r\nimport { css } from '@emotion/core';\r\nimport { useStaticQuery, Link, graphql } from 'gatsby';\r\nimport '../styles/global.scss';\r\n\r\nexport default ({ children }) => {\r\n  const data = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n          }\r\n        }\r\n      }\r\n    `\r\n  );\r\n  return (\r\n    <div className=\"main\">\r\n      <Link to=\"/\">\r\n        <h3\r\n          className=\"display-1\"\r\n          css={css`\r\n            display: inline-block;\r\n          `}\r\n        >\r\n          {data.site.siteMetadata.title}\r\n        </h3>\r\n      </Link>\r\n      <Link\r\n        className=\"button\"\r\n        to=\"/about/\"\r\n        css={css`\r\n          float: right;\r\n        `}\r\n      >\r\n        About\r\n      </Link>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport { css } from '@emotion/core';\nimport { Link, graphql } from 'gatsby';\nimport Layout from '../components/layout';\n\nexport default ({ data }) => (\n  <Layout>\n    <div>\n      <h1\n        className=\"headline\"\n        css={css`\n          display: inline-block;\n          border-bottom: 1px solid;\n        `}\n      >\n        Blog Posts\n      </h1>\n      {data.allMarkdownRemark.edges\n        .filter(({ node }) => node.fields.slug.includes('complete'))\n        .map(({ node }) => (\n          <div key={node.id} className=\"posts\">\n            <Link\n              to={node.fields.slug}\n              css={css`\n                text-decoration: none;\n                color: inherit;\n              `}\n            >\n              <h3\n                className=\"subhead-1\"\n                css={css`\n                  margin-bottom: 1rem};\n                `}\n              >\n                {node.frontmatter.title} <span>â€” {node.frontmatter.date}</span>\n              </h3>\n              <p className=\"label\">{node.excerpt}</p>\n            </Link>\n          </div>\n        ))}\n    </div>\n  </Layout>\n);\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            date(formatString: \"DD MMMM, YYYY\")\n          }\n          fields {\n            slug\n          }\n          excerpt\n        }\n      }\n    }\n  }\n`;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}